// Generated by Dagger (https://dagger.dev).
package com.patrykkosieradzki.cryptobag.data;

import com.patrykkosieradzki.cryptobag.feature.home.data.HomeDataModule;
import com.patrykkosieradzki.feature.home.domain.repository.CoinRepository;
import com.patrykkosieradzki.feature.home.domain.usecase.GetCoinsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeDataModule_ProvideGetCoinsUseCaseFactory implements Factory<GetCoinsUseCase> {
  private final Provider<CoinRepository> coinRepositoryProvider;

  public HomeDataModule_ProvideGetCoinsUseCaseFactory(
      Provider<CoinRepository> coinRepositoryProvider) {
    this.coinRepositoryProvider = coinRepositoryProvider;
  }

  @Override
  public GetCoinsUseCase get() {
    return provideGetCoinsUseCase(coinRepositoryProvider.get());
  }

  public static HomeDataModule_ProvideGetCoinsUseCaseFactory create(
      Provider<CoinRepository> coinRepositoryProvider) {
    return new HomeDataModule_ProvideGetCoinsUseCaseFactory(coinRepositoryProvider);
  }

  public static GetCoinsUseCase provideGetCoinsUseCase(CoinRepository coinRepository) {
    return Preconditions.checkNotNullFromProvides(HomeDataModule.INSTANCE.provideGetCoinsUseCase(coinRepository));
  }
}
